// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫
const { Telegraf } = require('telegraf');
const mongoose = require('mongoose');
const { OpenAI } = require('openai');
const cron = require('node-cron');
require('dotenv').config();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const ADMIN_ID = process.env.ADMIN_TELEGRAM_ID;

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
function isAdmin(ctx) {
  return ctx.from.id.toString() === ADMIN_ID;
}

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB Atlas
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('MongoDB –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'))
.catch(err => console.error('MongoDB –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', err));

// –°—Ö–µ–º–∞ –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
const userSchema = new mongoose.Schema({
  chatId: { type: Number, required: true, unique: true },
  zodiacSign: { type: String, required: true },
  language: { type: String, required: true, default: 'en' },
  registrationDate: { type: Date, default: Date.now }
});

// –ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const User = mongoose.model('User', userSchema);

// –°—Ö–µ–º–∞ –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≥–æ—Ä–æ—Å–∫–æ–ø—ñ–≤
const horoscopeSchema = new mongoose.Schema({
  zodiacSign: { type: String, required: true },
  text: { type: String, required: true },
  language: { type: String, required: true },
  date: { type: Date, default: Date.now }
});

// –ú–æ–¥–µ–ª—å –≥–æ—Ä–æ—Å–∫–æ–ø—É
const Horoscope = mongoose.model('Horoscope', horoscopeSchema);

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ - –∑–Ω–∞–∫–∏ –∑–æ–¥—ñ–∞–∫—É
const ZODIAC_SIGNS = [
  '–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü—å', '–ë–ª–∏–∑–Ω—é–∫–∏', '–†–∞–∫', 
  '–õ–µ–≤', '–î—ñ–≤–∞', '–¢–µ—Ä–µ–∑–∏', '–°–∫–æ—Ä–ø—ñ–æ–Ω', 
  '–°—Ç—Ä—ñ–ª–µ—Ü—å', '–ö–æ–∑–µ—Ä—ñ–≥', '–í–æ–¥–æ–ª—ñ–π', '–†–∏–±–∏'
];

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ - –º–æ–≤–∏
const LANGUAGES = {
  'uk': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
  'en': 'üá¨üáß English',
  'es': 'üá™üá∏ Espa√±ol',
  'ru': 'üè≥Ô∏è –†—É—Å—Å–∫–∏–π'
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ—Ä–æ—Å–∫–æ–ø—É —á–µ—Ä–µ–∑ OpenAI API
async function generateHoroscope(zodiacSign, language) {
  try {
    const languagePrompts = {
      'uk': '—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é',
      'en': 'in English',
      'es': 'en espa√±ol',
      'ru': '–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'
    };

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { 
          role: "system", 
          content: "–í–∏ - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –°—Ç–≤–æ—Ä—ñ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ç–∞ –º–æ—Ç–∏–≤—É—é—á–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ."
        },
        { 
          role: "user", 
          content: `–ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–ª—è –∑–Ω–∞–∫—É ${zodiacSign} ${languagePrompts[language]}. –ì–æ—Ä–æ—Å–∫–æ–ø –º–∞—î –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º, –º–æ—Ç–∏–≤—É—é—á–∏–º —ñ –º—ñ—Å—Ç–∏—Ç–∏ –ø–æ—Ä–∞–¥–∏ –Ω–∞ –¥–µ–Ω—å.`
        }
      ],
      max_tokens: 800
    });

    return response.choices[0].message.content.trim();
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ—Ä–æ—Å–∫–æ–ø—É –¥–ª—è ${zodiacSign}:`, error);
    return `–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${zodiacSign} —Å—å–æ–≥–æ–¥–Ω—ñ.`;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥–æ—Ä–æ—Å–∫–æ–ø—ñ–≤ —É –±–∞–∑—É –¥–∞–Ω–∏—Ö
async function saveHoroscope(zodiacSign, text, language) {
  try {
    const horoscope = new Horoscope({
      zodiacSign,
      text,
      language,
      date: new Date()
    });
    await horoscope.save();
    console.log(`–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${zodiacSign} (${language}) –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö`);
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≥–æ—Ä–æ—Å–∫–æ–ø—É –¥–ª—è ${zodiacSign}:`, error);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–æ—Ä–æ—Å–∫–æ–ø—ñ–≤ —É—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
async function sendHoroscopesToAllUsers() {
  try {
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥–æ—Ä–æ—Å–∫–æ–ø—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –∑–Ω–∞–∫—ñ–≤ —Ç–∞ –º–æ–≤
    for (const sign of ZODIAC_SIGNS) {
      for (const [langCode, langName] of Object.entries(LANGUAGES)) {
        const horoscopeText = await generateHoroscope(sign, langCode);
        await saveHoroscope(sign, horoscopeText, langCode);
        
        // –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ü–∏–º –∑–Ω–∞–∫–æ–º –∑–æ–¥—ñ–∞–∫—É —Ç–∞ –º–æ–≤–æ—é
        const users = await User.find({ zodiacSign: sign, language: langCode });
        
        // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–æ—Ä–æ—Å–∫–æ–ø—É —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
        for (const user of users) {
          try {
            await bot.telegram.sendMessage(
              user.chatId,
              `üåü *–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${sign} –Ω–∞ ${new Date().toLocaleDateString('uk-UA')}* üåü\n\n${horoscopeText}`,
              { parse_mode: 'Markdown' }
            );
            console.log(`–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.chatId}`);
          } catch (err) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–æ—Ä–æ—Å–∫–æ–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.chatId}:`, err);
          }
        }
      }
    }
    console.log('–†–æ–∑—Å–∏–ª–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ –≥–æ—Ä–æ—Å–∫–æ–ø—ñ–≤:', error);
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start - –≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è
bot.start(async (ctx) => {
  await ctx.reply(
    'Welcome! I am a bot that sends daily horoscopes. ' +
    'To receive horoscopes, please register by selecting your preferred language and zodiac sign.',
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'Register', callback_data: 'register' }
          ]
        ]
      }
    }
  );
});

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –∑–∞–ø–∏—Ç –º–æ–≤–∏
bot.action('register', async (ctx) => {
  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –º–æ–≤–∞–º–∏
  const languageKeyboard = {
    inline_keyboard: Object.entries(LANGUAGES).map(([code, name]) => [
      { text: name, callback_data: `lang_${code}` }
    ])
  };
  
  await ctx.editMessageText('Please select your preferred language:', {
    reply_markup: languageKeyboard
  });
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏
Object.keys(LANGUAGES).forEach(langCode => {
  bot.action(`lang_${langCode}`, async (ctx) => {
    const chatId = ctx.chat.id;
    
    try {
      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑—ñ –∑–Ω–∞–∫–∞–º–∏ –∑–æ–¥—ñ–∞–∫—É
      const zodiacKeyboard = {
        inline_keyboard: ZODIAC_SIGNS.map(sign => [{ text: sign, callback_data: `zodiac_${langCode}_${sign}` }])
      };
      
      await ctx.editMessageText('Please select your zodiac sign:', {
        reply_markup: zodiacKeyboard
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∑–Ω–∞–∫—É –∑–æ–¥—ñ–∞–∫—É:', error);
      await ctx.reply('An error occurred. Please try again later.');
    }
  });
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∑–Ω–∞–∫—É –∑–æ–¥—ñ–∞–∫—É
ZODIAC_SIGNS.forEach(sign => {
  Object.keys(LANGUAGES).forEach(langCode => {
    bot.action(`zodiac_${langCode}_${sign}`, async (ctx) => {
      const chatId = ctx.chat.id;
      
      try {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
        let user = await User.findOne({ chatId });
        
        if (user) {
          // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          user.zodiacSign = sign;
          user.language = langCode;
          await user.save();
          await ctx.editMessageText(`Your profile has been updated:\nZodiac sign: ${sign}\nLanguage: ${LANGUAGES[langCode]}`);
        } else {
          // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          user = new User({
            chatId,
            zodiacSign: sign,
            language: langCode
          });
          await user.save();
          await ctx.editMessageText(`You have successfully registered:\nZodiac sign: ${sign}\nLanguage: ${LANGUAGES[langCode]}`);
        }
        
        // –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        // –ü–æ—à—É–∫ –≥–æ—Ä–æ—Å–∫–æ–ø—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –¥–∞—Ç—É
        let horoscope = await Horoscope.findOne({
          zodiacSign: sign,
          language: langCode,
          date: { $gte: today }
        });
        
        // –Ø–∫—â–æ –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —â–µ –Ω–µ –±—É–ª–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ
        if (!horoscope) {
          const horoscopeText = await generateHoroscope(sign, langCode);
          await saveHoroscope(sign, horoscopeText, langCode);
          horoscope = { text: horoscopeText };
        }
        
        // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É
        await ctx.reply(
          `üåü *Horoscope for ${sign} on ${new Date().toLocaleDateString('en-US')}* üåü\n\n${horoscope.text}`,
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
        await ctx.reply('An error occurred during registration. Please try again later.');
      }
    });
  });
});

// –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
bot.command('register', (ctx) => {
  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –º–æ–≤–∞–º–∏
  const languageKeyboard = {
    inline_keyboard: Object.entries(LANGUAGES).map(([code, name]) => [
      { text: name, callback_data: `lang_${code}` }
    ])
  };
  
  ctx.reply(
    'Please select your preferred language:',
    {
      reply_markup: languageKeyboard
    }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /profile - –ø–µ—Ä–µ–≥–ª—è–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
bot.command('profile', async (ctx) => {
  const chatId = ctx.chat.id;
  
  try {
    const user = await User.findOne({ chatId });
    
    if (user) {
      await ctx.reply(
        `–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n–ó–Ω–∞–∫ –∑–æ–¥—ñ–∞–∫—É: ${user.zodiacSign}\n–ú–æ–≤–∞: ${LANGUAGES[user.language]}\n–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ${user.registrationDate.toLocaleDateString('uk-UA')}`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', callback_data: 'register' }]
            ]
          }
        }
      );
    } else {
      await ctx.reply(
        '–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∏.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', callback_data: 'register' }]
            ]
          }
        }
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é:', error);
    await ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /horoscope - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É
bot.command('horoscope', async (ctx) => {
  const chatId = ctx.chat.id;
  
  try {
    const user = await User.findOne({ chatId });
    
    if (user) {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      // –ü–æ—à—É–∫ –≥–æ—Ä–æ—Å–∫–æ–ø—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –¥–∞—Ç—É
      let horoscope = await Horoscope.findOne({
        zodiacSign: user.zodiacSign,
        language: user.language,
        date: { $gte: today }
      });
      
      // –Ø–∫—â–æ –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —â–µ –Ω–µ –±—É–ª–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ
      if (!horoscope) {
        const horoscopeText = await generateHoroscope(user.zodiacSign, user.language);
        await saveHoroscope(user.zodiacSign, horoscopeText, user.language);
        horoscope = { text: horoscopeText };
      }
      
      await ctx.reply(
        `üåü *–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${user.zodiacSign} –Ω–∞ ${new Date().toLocaleDateString('uk-UA')}* üåü\n\n${horoscope.text}`,
        { parse_mode: 'Markdown' }
      );
    } else {
      await ctx.reply(
        '–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∏.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', callback_data: 'register' }]
            ]
          }
        }
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥–æ—Ä–æ—Å–∫–æ–ø—É:', error);
    await ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥–æ—Ä–æ—Å–∫–æ–ø—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /help - –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏
bot.help((ctx) => {
  ctx.reply(
    '–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n' +
    '/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n' +
    '/register - –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n' +
    '/profile - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n' +
    '/horoscope - –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –≥–æ—Ä–æ—Å–∫–æ–ø\n' +
    '/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É'
  );
});

// –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
bot.on('text', (ctx) => {
  ctx.reply(
    '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º.\n' +
    '–í–≤–µ–¥—ñ—Ç—å /help –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.'
  );
});

// –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø—ñ–≤ –æ 8:00 —Ä–∞–Ω–∫—É
cron.schedule('0 8 * * *', async () => {
  console.log('–ü–æ—á–∏–Ω–∞—î–º–æ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –≥–æ—Ä–æ—Å–∫–æ–ø—ñ–≤...');
  await sendHoroscopesToAllUsers();
});

// –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
bot.command('admin', async (ctx) => {
  if (!isAdmin(ctx)) {
    return ctx.reply('–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.');
  }

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
      [{ text: 'üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ', callback_data: 'admin_today' }],
      [{ text: 'üåç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ –º–æ–≤–∞–º–∏', callback_data: 'admin_languages' }],
      [{ text: '‚≠ê –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ –∑–Ω–∞–∫–∞–º–∏', callback_data: 'admin_zodiac' }],
      [{ text: 'üìà –ì—Ä–∞—Ñ—ñ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π', callback_data: 'admin_graph' }],
      [{ text: 'üì® –†–æ–∑—Å–∏–ª–∫–∞', callback_data: 'admin_broadcast' }]
    ]
  };

  await ctx.reply('–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', { reply_markup: keyboard });
});

// –û–±—Ä–æ–±–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö callback-—ñ–≤
bot.action('admin_stats', async (ctx) => {
  if (!isAdmin(ctx)) return;

  try {
    const totalUsers = await User.countDocuments();
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const newUsersToday = await User.countDocuments({ registrationDate: { $gte: today } });

    await ctx.editMessageText(
      `üìä *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n` +
      `–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${totalUsers}\n` +
      `–ù–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ: ${newUsersToday}`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    await ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

bot.action('admin_today', async (ctx) => {
  if (!isAdmin(ctx)) return;

  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const todayUsers = await User.find({ registrationDate: { $gte: today } });

    let message = 'üë• *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ*\n\n';
    for (const user of todayUsers) {
      message += `ID: ${user.chatId}\n` +
                `–ó–Ω–∞–∫: ${user.zodiacSign}\n` +
                `–ú–æ–≤–∞: ${LANGUAGES[user.language]}\n` +
                `–ß–∞—Å: ${user.registrationDate.toLocaleTimeString()}\n\n`;
    }

    await ctx.editMessageText(message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:', error);
    await ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.');
  }
});

bot.action('admin_languages', async (ctx) => {
  if (!isAdmin(ctx)) return;

  try {
    const languageStats = await User.aggregate([
      { $group: { _id: '$language', count: { $sum: 1 } } }
    ]);

    let message = 'üåç *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ –º–æ–≤–∞–º–∏*\n\n';
    for (const stat of languageStats) {
      message += `${LANGUAGES[stat._id]}: ${stat.count}\n`;
    }

    await ctx.editMessageText(message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–æ–≤–∞–º–∏:', error);
    await ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

bot.action('admin_zodiac', async (ctx) => {
  if (!isAdmin(ctx)) return;

  try {
    const zodiacStats = await User.aggregate([
      { $group: { _id: '$zodiacSign', count: { $sum: 1 } } }
    ]);

    let message = '‚≠ê *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ –∑–Ω–∞–∫–∞–º–∏ –∑–æ–¥—ñ–∞–∫—É*\n\n';
    for (const stat of zodiacStats) {
      message += `${stat._id}: ${stat.count}\n`;
    }

    await ctx.editMessageText(message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –∑–Ω–∞–∫–∞–º–∏:', error);
    await ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

bot.action('admin_graph', async (ctx) => {
  if (!isAdmin(ctx)) return;

  try {
    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

    const registrations = await User.aggregate([
      {
        $match: {
          registrationDate: { $gte: sevenDaysAgo }
        }
      },
      {
        $group: {
          _id: { $dateToString: { format: '%Y-%m-%d', date: '$registrationDate' } },
          count: { $sum: 1 }
        }
      },
      { $sort: { _id: 1 } }
    ]);

    let message = 'üìà *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤*\n\n';
    for (const reg of registrations) {
      message += `${reg._id}: ${reg.count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n`;
    }

    await ctx.editMessageText(message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π:', error);
    await ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∞.');
  }
});

// –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.action('admin_broadcast', async (ctx) => {
  if (!isAdmin(ctx)) return;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üì® –í—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º', callback_data: 'broadcast_all' }],
      [{ text: 'üåç –ó–∞ –º–æ–≤–æ—é', callback_data: 'broadcast_language' }],
      [{ text: '‚≠ê –ó–∞ –∑–Ω–∞–∫–æ–º –∑–æ–¥—ñ–∞–∫—É', callback_data: 'broadcast_zodiac' }]
    ]
  };

  await ctx.editMessageText('–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏:', { reply_markup: keyboard });
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Ä–æ–∑—Å–∏–ª–∫–∏
bot.action('broadcast_all', async (ctx) => {
  if (!isAdmin(ctx)) return;
  ctx.session = { ...ctx.session, broadcastType: 'all' };
  await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:');
});

bot.action('broadcast_language', async (ctx) => {
  if (!isAdmin(ctx)) return;
  const keyboard = {
    inline_keyboard: Object.entries(LANGUAGES).map(([code, name]) => [
      { text: name, callback_data: `broadcast_lang_${code}` }
    ])
  };
  await ctx.editMessageText('–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:', { reply_markup: keyboard });
});

bot.action('broadcast_zodiac', async (ctx) => {
  if (!isAdmin(ctx)) return;
  const keyboard = {
    inline_keyboard: ZODIAC_SIGNS.map(sign => [
      { text: sign, callback_data: `broadcast_zodiac_${sign}` }
    ])
  };
  await ctx.editMessageText('–í–∏–±–µ—Ä—ñ—Ç—å –∑–Ω–∞–∫ –∑–æ–¥—ñ–∞–∫—É:', { reply_markup: keyboard });
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
Object.keys(LANGUAGES).forEach(langCode => {
  bot.action(`broadcast_lang_${langCode}`, async (ctx) => {
    if (!isAdmin(ctx)) return;
    ctx.session = { ...ctx.session, broadcastType: 'language', language: langCode };
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:');
  });
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∑–Ω–∞–∫—É –∑–æ–¥—ñ–∞–∫—É –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
ZODIAC_SIGNS.forEach(sign => {
  bot.action(`broadcast_zodiac_${sign}`, async (ctx) => {
    if (!isAdmin(ctx)) return;
    ctx.session = { ...ctx.session, broadcastType: 'zodiac', zodiacSign: sign };
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:');
  });
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
bot.on('text', async (ctx) => {
  if (!isAdmin(ctx) || !ctx.session?.broadcastType) return;

  const message = ctx.message.text;
  let users;

  try {
    switch (ctx.session.broadcastType) {
      case 'all':
        users = await User.find({});
        break;
      case 'language':
        users = await User.find({ language: ctx.session.language });
        break;
      case 'zodiac':
        users = await User.find({ zodiacSign: ctx.session.zodiacSign });
        break;
    }

    let successCount = 0;
    let failCount = 0;

    for (const user of users) {
      try {
        await bot.telegram.sendMessage(user.chatId, message);
        successCount++;
      } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.chatId}:`, error);
        failCount++;
      }
    }

    await ctx.reply(
      `–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n` +
      `–£—Å–ø—ñ—à–Ω–æ: ${successCount}\n` +
      `–ü–æ–º–∏–ª–æ–∫: ${failCount}`
    );

    // –û—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
    ctx.session = {};
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ:', error);
    await ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.');
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ'))
  .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', err));

// –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));